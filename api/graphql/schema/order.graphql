# import User from "user.graphql"
# import MenuItem from "menu.graphql"

type OrderItem {
  quantity: Int!
  item: MenuItem!
}

enum OrderState {
  Ordering
  Placed
  Preparing
  Ready
  Complete
}

type Order {
  id: ID!
  items: [OrderItem!]!
  state: OrderState!
  price: Float!
  date: DateTime
  orderer: User!
}

query findOrdersForUser($userId: ID!) {
  orders(userId: $userId) {
    ...OrderFields
  }
}

query currentOrderForUser($userId: ID!) {
  currentOrderForUser(userId: $userId) {
    ...OrderFields
  }
}

fragment OrderFields on Order {
  id
  state
  price
  date
  orderer {
    id
    name
  }
  items {
    quantity
    item {
      id
      name
      price
    }
  }
}

mutation createOrder($userId: ID, $sessionId: ID) {
  createOrder(userId: $userId, sessionId: $sessionId) {
    ...OrderFields
  }
}

mutation addItemToOrder($orderId: ID!, $menuItemId: ID!, $quantity: Int!) {
  addItemToOrder(
    orderId: $orderId
    menuItemId: $menuItemId
    quantity: $quantity
  ) {
    ...OrderFields
  }
}

mutation submitOrder($orderId: ID, $user: UserInput!) {
  submitOrder(orderId: $orderId, user: $user) {
    ...OrderFields
  }
}
